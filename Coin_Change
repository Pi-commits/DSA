class Solution:
    
    # Implemented Rod cutting approach     

    def coinChange(self, coins: List[int], amount: int) -> int:
        
        # Using 2D matrix
        
        min_coins_matrix = [ [ 0 for i in range(amount + 1) ] for j in range(rows_len) ]

        for i in range(rows_len):
            for j in range(1, amount + 1):
                # Check if current amount - current_coin = 0               
                if j - coins[i] == 0:
                    min_coins_matrix[i][j] = 1
                else:
                    
                    # if current coin > current amount and also it is the second coin, and both have values, choose minimum value
                    if j - coins[i] >= 0 and min_coins_matrix[i][j-coins[i]] != -1 and i - 1 >= 0 and min_coins_matrix[i-1][j] != -1:
                        min_coins_matrix[i][j] = min(1 + min_coins_matrix[i][j-coins[i]], min_coins_matrix[i-1][j])
                    
                    # if current coint > current amount, and remainder is also divisible
                    elif j - coins[i] >= 0 and min_coins_matrix[i][j-coins[i]] != -1:
                        min_coins_matrix[i][j] = 1 + min_coins_matrix[i][j-coins[i]]
                    
                    # if not first coin and current amount is divisible by previous coins and any coin before that
                    elif i -1 >= 0 and min_coins_matrix[i-1][j] != -1:
                        min_coins_matrix[i][j] = min_coins_matrix[i-1][j]
                        
                    # not divisible 
                    else:
                        min_coins_matrix[i][j] = -1     
        
        return min_coins_matrix[rows_len-1][amount]
                        
                            
                
                
            
            
            
