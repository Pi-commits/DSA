class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        
        if not grid:
            return 0
        
        self.rows = len(grid)
        self.cols = len(grid[0])
        self.visited = [[False for i in range(self.cols)] for j in range(self.rows)]
        self.island_count = 0
        
        for i in range(self.rows):
            for j in range(self.cols):
                
                if not self.visited[i][j] and grid[i][j] == "1":
                    
                    self.dfs(i, j, grid)
                    self.island_count += 1
                
        return self.island_count
                
    def dfs(self, row, col, grid):
        
        if grid[row][col] == "1" and not self.visited[row][col]:
            
            self.visited[row][col] = True
            
            cal = [[1, 0], [0, 1], [-1, 0], [0, -1]]

            for r_cal, c_cal in cal:
                
                r = row + r_cal
                c = col + c_cal
                
                if r >= 0 and r < self.rows and c >= 0 and c < self.cols and not self.visited[r][c] and grid[r][c] == "1":
                    self.dfs(r, c, grid)
        return True
        
        
        
        
# Version 2
class Solution:
  def numIslands(self, grid):
        if not grid:
            return 0

        count = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    self.dfs(grid, i, j)
                    count += 1
        return count

    def dfs(self, grid, i, j):
        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != '1':
            return
        grid[i][j] = '#'
        self.dfs(grid, i+1, j)
        self.dfs(grid, i-1, j)
        self.dfs(grid, i, j+1)
        self.dfs(grid, i, j-1)
                
