class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        
        if not grid:
            return 0

        rows = len(grid)
        cols = len(grid[0])

        min_cost_matrix = [ [ 0 for i in range(cols) ] for j in range(rows) ]
        
        min_cost_matrix[0][0] = grid[0][0]
        
        for i in range(1, cols):
            min_cost_matrix[0][i] = min_cost_matrix[0][i-1] + grid[0][i]
            
        
        for i in range(1, rows):
            min_cost_matrix[i][0] = min_cost_matrix[i-1][0] + grid[i][0]
            
        for r in range(1, rows):
            for c in range(1, cols):
                if min_cost_matrix[r-1][c] + grid[r][c] < min_cost_matrix[r][c-1] + grid[r][c]:
                    min_cost_matrix[r][c] = min_cost_matrix[r-1][c] + grid[r][c]
                else:
                    min_cost_matrix[r][c] = min_cost_matrix[r][c-1] + grid[r][c]
                    
        return min_cost_matrix[rows-1][cols-1]
                    
