class Solution:
    def countSubstrings(self, s: str) -> int:
        
        if not s:
            return 0
            
        # Using DP Approach
        # Learned from this video : https://www.youtube.com/watch?v=XmSOWnL6T_I&ab_channel=Pepcoding
        
        count = 0
        l = len(s)
        dp = [[False for i in range(l)] for j in range(l)]
        
        
        # Iterating diagonal wise 
        # First (0, 0), (1, 1), (2, 2), and so on
        # Second (0, 1), (1, 2), (2, 3), and so on
        # Third (0, 2), (1, 3), (2, 4), and so on
        # And so on
        
        for g in range(l):

            i = 0
            
            # temp represents the gap in the indexes
            temp = g
            
            # Already added palindromes not to be counted again
            # Uncomment already counted lines when unique substring are required            
            # already_counted = dict()
            
            while g < l:
                # These are indexes like (0,0), (1,1), (2,2), ... containing single alphabet like a, b, a, ... (index with zero gap)
                if temp == 0:
                    dp[i][g] = True
                    # if s[i] not in already_counted:
                    count += 1
                    # already_counted[s[i]] = True
                    
                # These are indexes like (0,1), (1,2), (2,3), ... containing single alphabet like ab, ba, aa, ... (index with gap of 1)
                elif temp == 1:
                    if (s[i] == s[g]):
                        dp[i][g] = True
                        # if s[i:g+1] not in already_counted:
                        count += 1
                        # already_counted[s[i:g+1]] = True
                        
                # (These are indexes with gap of 2 or more)
                else:
                    
                    if (s[i] == s[g]) and dp[i+1][g-1]:
                        dp[i][g] = True
                        # if s[i:g+1] not in already_counted:
                        count += 1
                        # already_counted[s[i:g+1]] = True
                        # print(s[i:g+1])
                
                i += 1
                g += 1
                
            g = temp
                
        return count
